install.packages("quantmod")
install.packages("lattice")
install.packages("timeSeries")
install.packages("rugarch")
library(quantmod)
install.packages("TTR")
install.packages("TTR")
library(quantmod)
version
updateR()
getSymbols("^GSPC", from="1950-01-01")
library(TTR)
library(quantmod)
library(lattice)
library(timeSeries)
library(timeDate)
library(parallel)
library(rugarch)
getSymbols('MSFT',src='google')
GSPC <- MSFT
GSPC
Cl(GSPC)
GSPC.head()
class(GSPC)
index(GSPC)
GSPC[1]
cl(GSPC)[1]
cl(GSPC)
Cl(GSPC)
Cl(GSPC)[1]
GSPC[1]
Hi(GSPC[)]1
]
gh
Hi(GSPC)[1]
GSPC[1]
close(GSPC)[1]
help(cl)
max(index(GSPC))
index(GSPC).name
index(GSPC)
x = list(a=1,b=2)
type(x)
class9x
class(x)
x$a
rm(list=ls())
library(TTR)
library(quantmod)
library(lattice)
library(timeSeries)
library(timeDate)
library(parallel)
library(rugarch)
# Obtain the S&P500 returns and truncate the NA value
getSymbols('MSFT',src='google')
GSPC <- MSFT
spReturns = diff(log(Cl(GSPC)))
spReturns[as.character(head(index(Cl(GSPC)),1))] = 0
# Create the forecasts vector to store the predictions
windowLength = 500
foreLength = length(spReturns) - windowLength
forecasts <- vector(mode="character", length=foreLength)
for (d in 0:2) {
print d
}
for (d in 0:2) {
print (d)
}
rm(list=ls())
library(TTR)
library(quantmod)
library(lattice)
library(timeSeries)
library(timeDate)
library(parallel)
library(rugarch)
library(zoo)
setwd("D:/kelvid/python/forecast")
mydata = read.csv("EURUSD.csv", header = FALSE)
colnames(mydata)=c("date","dummy",'open','high','low','close','volume')
mydata$dummy <- NULL
mydata$open <- NULL
mydata$high <- NULL
mydata$low <- NULL
mydata$volume <- NULL
#assign index
rownames(mydata) <- mydata$date
mydata$date1 <- as.Date(mydata$date , "%m/%d/%y")
df<- as.xts(mydata$close, order.by=as.Date(mydata$date, "%Y.%m.%d"))
colnames(df)=c('close')
GSPC <- df
spReturns = diff(log(Cl(GSPC)))
spReturns[as.character(head(index(Cl(GSPC)),1))] = 0
# Create the forecasts vector to store the predictions
windowLength = 500
foreLength = length(spReturns) - windowLength
forecasts <- vector(mode="character", length=foreLength)
d=0
spReturnsOffset = spReturns[(1+d):(windowLength+d)]
View(spReturnsOffset)
